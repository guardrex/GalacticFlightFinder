<div class="px-4">
    @if (Itineraries != null)
    {
        <div class="title">
            <h2 class="my-3">@Itineraries.Count results</h2>
            <select class="custom-select" bind="@chosenSortOrder">
                <option value=@SortOrder.Price>Cheapest</option>
                <option value=@SortOrder.Duration>Quickest</option>
            </select>
        </div>

        @foreach (var item in sortedItineraries)
        {
            <div class="mb-4 d-flex align-items-center">
                <ul class="list-group">
                    <li class="list-group-item d-flex align-items-center">
                        <SearchResultFlightSegment Symbol="▶" Flight=@item.Outbound ArrivalTime=@item.Outbound.DepartureTime.AddHours(item.Outbound.DurationHours) />
                    </li>
                    <li class="list-group-item d-flex align-items-center">
                        <SearchResultFlightSegment Symbol="◀" Flight=@item.Return ArrivalTime=@item.Return.DepartureTime.AddHours(item.Return.DurationHours) />
                    </li>
                </ul>
                <div class="price ml-3">
                    <h3>@item.Price.ToString("$0")</h3>
                    <button class="btn" onclick="@(() => OnAddItinerary(item))">Add</button>
                </div>
            </div>
        }
    }
</div>

@functions
{
    // Parameters
    public ICollection<Itinerary> Itineraries { get; set; }
    public Action<Itinerary> OnAddItinerary { get; set; }
    
    // Private state
    private SortOrder chosenSortOrder;
    private IEnumerable<Itinerary> sortedItineraries
        => chosenSortOrder == SortOrder.Price
        ? Itineraries.OrderBy(x => x.Price)
        : Itineraries.OrderBy(x => x.TotalDurationHours);

    enum SortOrder { Price, Duration }
}
